// =============================================================================
// CONFIG
// =============================================================================
// - Colours
// - Elevation
// - Iconography
// - Layout
// - Motion
// - Spacing
// - Typography
// - Viewports
//
// Linting rule changes:
// stylelint-disable unit-blacklist
// -----------------------------------------------------------------------------

// Color config
// -----------------------------------------------------------------------------
// p = primary colours
// n = neutral colours
// t = text colours
// -----------------------------------------------------------------------------

$colorMap: (
  'p5': #111,
  'p4': #222,
  'p3': #333,
  'p2': #444,
  'p1': #555,

  'n9': #000,
  'n8': #111,
  'n7': #333,
  'n6': #555,
  'n5': #777,
  'n4': #999,
  'n3': #bbb,
  'n2': #ddd,
  'n1': #fff,

  't5': #fff,
  't4': #eee,
  't3': #ccc,
  't2': #888,
  't1': #000
);

@function color($color) {
  @return map-get($colorMap, $color);
  @warn 'Unknown color `#{$color}` used in function.';
  @return null;
}

// Elevation config
// -----------------------------------------------------------------------------

$elevationMap: (
  'layer': (
    'negative': -1,
    'flat': 0,
    'raised': 1,
    'menu': 2,
    'sticky': 3,
    'drawer': 4,
    'overlay': 5,
    'tooltip': 6
  ),
  'shadow': (
    1: (0 1px 2px rgba(#000, 0.1)),
    2: (0 2px 4px rgba(#000, 0.1)),
    3: (0 2px 8px rgba(#000, 0.1)),
    4: (0 4px 12px rgba(#000, 0.1)),
    5: (0 4px 16px rgba(#000, 0.1)),
    6: (0 8px 20px rgba(#000, 0.1))
  )
);

@function elevation($name, $key) {
  @return map-get(map-get($elevationMap, $name), $key);
  @warn 'Unknown elevation value `#{$name}` used in function.';
  @return null;
}

// Icons config
// -----------------------------------------------------------------------------

$iconMap: (
  'small': 1rem,
  'medium': 1.5rem,
  'large': 3rem
);

@function icon($size) {
  @return map-get($iconMap, $size);
  @warn 'Unknown icon size `#{$size}` used in function.';
  @return null;
}

// Layout config
// -----------------------------------------------------------------------------

$layoutMap: (
  'container': (
    'fixed': 1280px
  ),
  'gutter': (
    'small': 0.5rem,
    'medium': 1rem,
    'large': 1.5rem,
    'xlarge': 3rem
  ),
  'width': (
    100%: 100%,
    80%: 80%,
    75%: 75%,
    66%: 66.66667%,
    60%: 60%,
    50%: 50%,
    40%: 40%,
    33%: 33.33334%,
    25%: 25%,
    20%: 20%
  )
);

@function layout($name, $key) {
  @return map-get(map-get($layoutMap, $name), $key);
  @warn 'Unknown layout value `#{$name}` used in function.';
  @return null;
}

// Motion config
// -----------------------------------------------------------------------------

$motionMap: (
  'duration': (
    'fastest': 0.15s,
    'fast':  0.25s,
    'slow':  0.5s,
    'slowest': 0.75s
  ),
  'timing': (
    'ease': cubic-bezier(0.5, 0, 0.1, 1),
    'easeIn': cubic-bezier(0.25, 0, 1, 1),
    'easeOut': cubic-bezier(0, 0, 0.25, 1)
  )
);

@function motion($name, $key) {
  @return map-get(map-get($motionMap, $name), $key);
  @warn 'Unknown motion name `#{$name}` used in function.';
  @return null;
}

// Spacing config
// -----------------------------------------------------------------------------
// Keep consistent spacing throughout your interfaces.
// The spacing rhythm is your interfaces vertical rhythm value.
//
// Every call of the space function is evaluated against the spacing rhythm.
// If the remainder is not 0, the value entered does not follow the defined
// vertical rhythm and will create a warning.
// -----------------------------------------------------------------------------

$spacingUnit: 1rem;
$spacingRhythm: 0.125;

@function space($value, $custom: null) {
  @if $value % $spacingRhythm == 0 {
    @return $spacingUnit * $value;
  } @else if $custom == 'custom' {
    @return $spacingUnit * $value;
  }
  @warn 'Spacing value does not follow the design guidelines spacing rhythm.';
  @return null;
}

// Typography config
// -----------------------------------------------------------------------------
// You may change the font weight or family of any text you deem appropriate
// within your partials using the family or weight values.
// Each font combination should maintain its size and line-height where applied.
//
// d = display text
// h = heading text
// b = body text
// -----------------------------------------------------------------------------

$typographyMap: (
  'family': (
    'display': (-apple-system, roboto, 'Segoe UI', sans-serif),
    'heading': (-apple-system, roboto, 'Segoe UI', sans-serif),
    'body': ('Noto Sans', -apple-system, roboto, 'Segoe UI', sans-serif)
  ),

  'weight': (
    'thin': 300,
    'normal': 400,
    'bold': 700
  ),

  'd1': (
    'weight': 300,
    'size': 2.5625rem,
    'lineHeight': 3.25rem
  ),
  'd2': (
    'weight': 300,
    'size': 2.25rem,
    'lineHeight': 3rem
  ),
  'd3': (
    'weight': 300,
    'size': 2rem,
    'lineHeight': 2.75rem
  ),

  'h1': (
    'weight': 700,
    'size': 1.625rem,
    'lineHeight': 2.25rem
  ),
  'h2': (
    'weight': 700,
    'size': 1.4375rem,
    'lineHeight': 2rem
  ),
  'h3': (
    'weight': 700,
    'size': 1.25rem,
    'lineHeight': 1.875rem
  ),

  'b1': (
    'weight': 400,
    'size': 1rem,
    'lineHeight': 1.5rem
  ),
  'b2': (
    'weight': 400,
    'size': 0.875rem,
    'lineHeight': 1.375rem
  ),
  'b3': (
    'weight': 400,
    'size': 0.75rem,
    'lineHeight': 1.25rem
  )
);

@function font($name, $key) {
  @return map-get(map-get($typographyMap, $name), $key);
  @warn 'Unknown font value `#{$name}` used in function.';
  @return null;
}

@mixin font($name) {
  font-size: font($name, 'size');
  font-weight: font($name, 'weight');
  line-height: font($name, 'lineHeight');
}

// Viewports config
// -----------------------------------------------------------------------------

$viewportMap: (
  'small': 481px,
  'medium': 721px,
  'large': 961px,
  'xlarge': 1281px
);

@function viewport($viewport) {
  @return map-get($viewportMap, $viewport);
  @warn 'Unknown viewport `#{$viewport}` specified in function.';
  @return null;
}

@mixin viewport($size, $maxWidth: null) {
  @if $maxWidth == 'max' {
    @media (max-width: (viewport($size) - 1px)) {
      @content;
    }
  } @else {
    @media (min-width: viewport($size)) {
      @content;
    }
  }
}
