// =============================================================================
// STYLES CONFIG
// =============================================================================
// Tokens:
// - Colours
// - Grid
// - Iconography
// - Layers
// - Motion
// - Spacing
// - Typography
// - Viewports
//
// Linting rule changes:
// stylelint-disable unit-blacklist
// -----------------------------------------------------------------------------

// Color config
// -----------------------------------------------------------------------------

$colorMap: (
  'p500': #111,
  'p400': #222,
  'p300': #333,
  'p200': #444,
  'p100': #555
);

@function color($color) {
  @if map-has-key($colorMap, $color) {
    @return map-get($colorMap, $color);
  }
  @warn 'Unknown color `#{$color}` used in function.';
  @return null;
}

// Grid config
// -----------------------------------------------------------------------------

$columnsMap: (
  '12/12': 100%,
  '11/12': 91.66667%,
  '10/12': 83.33334%,
  '9/12': 75%,
  '8/12': 66.66667%,
  '7/12': 58.33334%,
  '6/12': 50%,
  '5/12': 41.66667%,
  '4/12': 33.33334%,
  '3/12': 25%,
  '2/12': 16.66667%,
  '1/12': 8.33334%
);

$gutterMap: (
  'small': 0.5rem,
  'medium': 1rem,
  'large': 1.5rem,
  'xlarge': 3rem
);

@function columns($columns) {
  @if map-has-key($columnsMap, $columns) {
    @return map-get($columnsMap, $columns);
  }
  @warn 'Unknown column size `#{$columns}` used in function.';
  @return null;
}

@function gutter($size) {
  @if map-has-key($gutterMap, $size) {
    @return map-get($gutterMap, $size);
  }
  @warn 'Unknown gutter size `#{$size}` used in function.';
  @return null;
}

// Icons config
// -----------------------------------------------------------------------------

$iconSizeMap: (
  'small': 1rem,
  'medium': 1.5rem,
  'large': 3rem
);

@function icon($size) {
  @if map-has-key($iconSizeMap, $size) {
    @return map-get($iconSizeMap, $size);
  }
  @warn 'Unknown icon size `#{$size}` used in function.';
  @return null;
}

// Layers config
// -----------------------------------------------------------------------------
// Keep track of all your z-index layers from one central location.
//
// The variables are strictly for use in the below zIndexMap. They must never
// be referenced in any partial file.
//
// Example use in partial: .class { z-index: layer('dropdown'); }
// -----------------------------------------------------------------------------

$elevationMap: (
  'negative': -1,
  'flat': 0,
  'raised': 1,
  'dropdown': 2,
  'sticky': 3,
  'drawer': 4,
  'modal': 5,
  'tooltip': 6
);

$elevationMap: (
  1: (0 1px 4px rgba(0, 0, 0, 0.25)),
  2: (0 1px 5px rgba(0, 0, 0, 0.1), 0 3px 6px rgba(0, 0, 0, 0.1)),
  3: (0 1px 5px rgba(0, 0, 0, 0.1), 0 6px 10px rgba(0, 0, 0, 0.1)),
);

@function elevation($layer) {
  @if map-has-key($elevationMap, $layer) {
    @return map-get($elevationMap, $layer);
  }
  @warn 'Unknown elevation name `#{$layer}` used in function.';
  @return null;
}

@function shadow($shadow) {
  @if map-has-key($shadowMap, $shadow) {
    @return map-get($shadowMap, $shadow);
  }
  @warn 'Unknown shadow name `#{$shadow}` used in function.';
  @return null;
}

// Motion config
// -----------------------------------------------------------------------------



// Spacing config
// -----------------------------------------------------------------------------
// Keep consistent spacing throughout your interfaces.
// The spacing rhythm is your interfaces vertical rhythm value.
//
// Every call of the space function is evaluated against the spacing rhythm.
// If the remainder is not 0, the value entered does not follow the defined
// vertical rhythm and will create a warning.
// -----------------------------------------------------------------------------

$spacingUnit: 1.5rem;
$spacingRhythm: 0.125;

@function space($value, $custom: null) {
  @if $value % $spacingRhythm == 0 {
    @return $spacingUnit * $value;
  } @else if $custom == 'custom' {
    @return $spacingUnit * $value;
  }
  @warn 'Spacing value does not follow the design guidelines spacing rhythm.';
  @return null;
}

// Typography config
// -----------------------------------------------------------------------------
// Keep control of your typography with type mappings.
// Each font combination should maintain its size and line-height where applied.
//
// You may change the font weight or family of any text you deem appropriate
// within your partials using the family or weight values.
// -----------------------------------------------------------------------------

$fontMap: (
  'family': (
    'display': (-apple-system, roboto, 'Segoe UI', sans-serif),
    'heading': (-apple-system, roboto, 'Segoe UI', sans-serif),
    'body': ('Noto Sans', -apple-system, roboto, 'Segoe UI', sans-serif)
  ),
  'weight': (
    'thin': 300,
    'normal': 400,
    'bold': 700
  ),
  'd1': (
    'weight': 300,
    'size': 2.5625rem,
    'lineHeight': 3.25rem
  ),
  'd2': (
    'weight': 300,
    'size': 2.25rem,
    'lineHeight': 3rem
  ),
  'd3': (
    'weight': 300,
    'size': 2rem,
    'lineHeight': 2.75rem
  ),
  'h1': (
    'weight': 700,
    'size': 1.625rem,
    'lineHeight': 2.25rem
  ),
  'h2': (
    'weight': 700,
    'size': 1.4375rem,
    'lineHeight': 2rem
  ),
  'h3': (
    'weight': 700,
    'size': 1.25rem,
    'lineHeight': 1.875rem
  ),
  'h4': (
    'weight': 700,
    'size': 1.125rem,
    'lineHeight': 1.75rem
  ),
  'b1': (
    'weight': 400,
    'size': 1rem,
    'lineHeight': 1.5rem
  ),
  'b2': (
    'weight': 400,
    'size': 0.875rem,
    'lineHeight': 1.375rem
  ),
  'b3': (
    'weight': 400,
    'size': 0.75rem,
    'lineHeight': 1.25rem
  )
);

@function font($name, $key) {
  @return map-get(map-get($fontMap, $name), $key);
  @warn 'Unknown font value `#{$name}` used in font function.';
  @return null;
}

// Viewports config
// -----------------------------------------------------------------------------

$viewportMap: (
  'small': 481px,
  'medium': 721px,
  'large': 961px,
  'xlarge': 1281px
);

@function viewport($viewport) {
  @if map-has-key($viewportMap, $viewport) {
    @return map-get($viewportMap, $viewport);
  }
  @warn 'Unknown viewport `#{$viewport}` specified in the viewport function.';
  @return null;
}

@mixin viewport($size, $maxWidth: null) {
  @if $maxWidth == 'max' {
    @media (max-width: (viewport($size) - 1px)) {
      @content;
    }
  } @else {
    @media (min-width: viewport($size)) {
      @content;
    }
  }
}
