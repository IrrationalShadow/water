// =============================================================================
// STYLES CONFIG
// =============================================================================


// Viewports config
// -----------------------------------------------------------------------------

$viewportMap: (
  'xlarge': 1281px,
  'large': 961px,
  'medium': 721px,
  'small': 481px
);


@function viewport($viewport) {
  @if map-has-key($viewportMap, $viewport) {
    @return map-get($viewportMap, $viewport);
  }
  @warn 'Unknown viewport `#{$viewport}` specified in the viewport function.';
  @return null;
}


@mixin viewport($size, $maxWidth: null) {
  @if $maxWidth == 'max-width' {
    @media (max-width: (viewport($size) - 1px)) { // 1
      @content;
    }
  } @else {
    @media (min-width: viewport($size)) {
      @content;
    }
  }
}


// Grid config
// -----------------------------------------------------------------------------

$columnsMap: (
  '12/12': 100%,
  '11/12': 91.66667%,
  '10/12': 83.33334%,
  '9/12':  75%,
  '8/12':  66.66667%,
  '7/12':  58.33334%,
  '6/12':  50%,
  '5/12':  41.66667%,
  '4/12':  33.33334%,
  '3/12':  25%,
  '2/12':  16.66667%,
  '1/12':  8.33334%,

  '4/5':   80%,
  '3/5':   60%,
  '2/5':   40%,
  '1/5':   20%
);


@function columns($columns) {
  @if map-has-key($columnsMap, $columns) {
    @return map-get($columnsMap, $columns);
  }
  @warn 'Unknown column size `#{$columns}` used in columns function.';
  @return null;
}


// Spacing config
// -----------------------------------------------------------------------------
// Keep consistent spacing throughout your interfaces.
// The spacing rhythm is your interfaces vertical rhythm value.
//
// Every call of the space function is evaluated against the spacing rhythm.
// If the remainder is not 0, the value entered does not follow the defined
// vertical rhythm and will create a warning.
// -----------------------------------------------------------------------------

$spacing-unit: 1rem;
$spacing-rhythm: 0.125;

@function space($value, $custom: null) {
  @if $value % $spacing-rhythm == 0 {
    @return $spacing-unit * $value;
  } @else if $custom == 'custom' {
    @return $spacing-unit * $value;
  }
  @warn 'Spacing value does not follow the design guidelines spacing rhythm.';
  @return null;
}


// Layers config
// -----------------------------------------------------------------------------
// Keep track of all your z-index layers from one central location.
//
// The variables are strictly for use in the below zIndexMap. They must never
// be referenced in any partial file.
//
// Example use in partial: .class { z-index: layer('dropdown'); }
// -----------------------------------------------------------------------------

$layer-1:  10;
$layer-2:  20;
$layer-3:  30;
$layer-4:  40;
$layer-5:  50;
$layer-6:  60;
$layer-7:  70;
$layer-8:  80;
$layer-9:  90;
$layer-10: 100;


$layerMap: (
  'negative': -1,
  'low': $layer-1,
  'medium': $layer-3,
  'high': $layer-5,

  'dropdown': $layer-5,
  'popover': $layer-5,
  'sticky': $layer-6,
  'drawer': $layer-7,
  'modal': $layer-8,
  'tooltip': $layer-9
);


@function layer($layer) {
  @if map-has-key($layerMap, $layer) {
    @return map-get($layerMap, $layer);
  }
  @warn 'Unknown z-index `#{$layer}` used in layer function.';
  @return null;
}


// Color config
// -----------------------------------------------------------------------------

$colorMap: (
  'p500': #111,
  'p400': #222,
  'p300': #333,
  'p200': #444,
  'p100': #555
);


@function color($color) {
  @return map-get(map-get($colorMap, $color), $variant);
  @warn 'Unknown color `#{$color}` used in color function.';
  @return null;
}


// Typography config
// -----------------------------------------------------------------------------
// Keep control of your typography with type mappings.
// Each font combination should maintain its size and line-height where applied.
//
// You may change the font weight or family of any text you deem appropriate
// within your partials using the family or weight values.
// -----------------------------------------------------------------------------

$fontMap: (
  'family': (
    'display': (-apple-system, Roboto, 'Segoe UI', sans-serif),
    'heading': (-apple-system, Roboto, 'Segoe UI', sans-serif),
    'body': ('Noto Sans', -apple-system, Roboto, 'Segoe UI', sans-serif)
  ),

  'weight': (
    'thin': 300,
    'normal': 400,
    'bold': 700
  ),

  'd1': (
    'weight': 300,
    'size': 2.5625rem,
    'lineHeight': 3.25rem
  ),

  'd2': (
    'weight': 300,
    'size': 2.25rem,
    'lineHeight': 3rem
  ),

  'd3': (
    'weight': 300,
    'size': 2rem,
    'lineHeight': 2.75rem
  ),

  'h1': (
    'weight': 700,
    'size': 1.625rem,
    'lineHeight': 2.25rem
  ),

  'h2': (
    'weight': 700,
    'size': 1.4375rem,
    'lineHeight': 2rem
  ),

  'h3': (
    'weight': 700,
    'size': 1.25rem,
    'lineHeight': 1.875rem
  ),

  'h4': (
    'weight': 700,
    'size': 1.125rem,
    'lineHeight': 1.75rem
  ),

  'b1': (
    'weight': 400,
    'size': 1rem,
    'lineHeight': 1.5rem
  ),

  'b2': (
    'weight': 400,
    'size': 0.875rem,
    'lineHeight': 1.375rem
  ),

  'b3': (
    'weight': 400,
    'size': 0.75rem,
    'lineHeight': 1.25rem
  ),
);


@function font($font, $value) {
  @return map-get(map-get($fontMap, $font), $value);
  @warn 'Unknown font value `#{$font}` used in font function.';
  @return null;
}
